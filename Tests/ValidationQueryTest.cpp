/*
 * Copyright 2024 HEAVY.AI, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "DBHandlerTestHelpers.h"
#include "TestHelpers.h"

#include "Logger/Logger.h"
#include "ThriftHandler/DBHandler.h"

using namespace TestHelpers;

class BaseTestFixture : public DBHandlerTestFixture {
 protected:
  void SetUp() override {}

  void TearDown() override {}

  const char* table_schema = "(x int, y int);";

  void buildTable(const std::string& table_name) {
    sql("DROP TABLE IF EXISTS " + table_name + ";");
    sql("CREATE TABLE " + table_name + " " + table_schema);
    ValuesGenerator gen(table_name);
    for (size_t i = 0; i < 10; i++) {
      sql(gen(i, i * 10));
    }
  }
};

class ValidateQueryTest : public BaseTestFixture {
 protected:
  void SetUp() override {
    BaseTestFixture::SetUp();
    buildTable("test");
  }

  void TearDown() override {
    sql("DROP TABLE IF EXISTS test;");
    BaseTestFixture::TearDown();
  }
};

TEST_F(ValidateQueryTest, WidthBucketExprScalarSubquery) {
  setExecuteMode(TExecuteMode::CPU);
  auto [db_handler, session_id] = getDbHandlerAndSessionId();
  TRowDescriptor validation_result;
  std::string q{
      "SELECT WIDTH_BUCKET(x,(SELECT MIN(x) FROM test), (SELECT MAX(x) FROM test), 10) "
      "AS x_bin, COUNT(*) AS n FROM test GROUP BY x_bin ORDER BY x_bin;"};
  EXPECT_NO_THROW(db_handler->sql_validate(validation_result, session_id, q));
  EXPECT_EQ(validation_result.size(), size_t(2));
  EXPECT_EQ(validation_result[0].col_type.type, TDatumType::INT);
  EXPECT_EQ(validation_result[1].col_type.type, TDatumType::INT);
}
TEST_F(ValidateQueryTest, WidthBucketExprHaveSameBound) {
  setExecuteMode(TExecuteMode::CPU);
  auto [db_handler, session_id] = getDbHandlerAndSessionId();
  TRowDescriptor validation_result;
  std::string q{
      "SELECT WIDTH_BUCKET(x,0, 0, 10) AS x_bin, COUNT(*) AS n FROM test GROUP BY x_bin "
      "ORDER BY x_bin;"};
  EXPECT_ANY_THROW(db_handler->sql_validate(validation_result, session_id, q));
}

TEST_F(ValidateQueryTest, WidthBucketExprHaveNullValueAsBound) {
  setExecuteMode(TExecuteMode::CPU);
  auto [db_handler, session_id] = getDbHandlerAndSessionId();
  TRowDescriptor validation_result;
  std::string q{
      "SELECT WIDTH_BUCKET(x,0, null, 10) AS x_bin, COUNT(*) AS n FROM test GROUP BY "
      "x_bin ORDER BY x_bin;"};
  EXPECT_ANY_THROW(db_handler->sql_validate(validation_result, session_id, q));
}

TEST_F(ValidateQueryTest, QueryStepSkipping) {
  setExecuteMode(TExecuteMode::CPU);
  auto [db_handler, session_id] = getDbHandlerAndSessionId();
  for (std::string tbl_name : {"T1", "T2"}) {
    sql("DROP TABLE IF EXISTS " + tbl_name + ";");
  }
  ScopeGuard drop_tables = []() {
    for (std::string tbl_name : {"T1", "T2"}) {
      sql("DROP TABLE IF EXISTS " + tbl_name + ";");
    }
  };
  sql("CREATE TABLE T1 (Longitude DOUBLE, Latitude DOUBLE, D TIMESTAMP(0));");
  sql("CREATE TABLE T2 (FIPS TEXT ENCODING DICT(32), geom GEOMETRY(MULTIPOLYGON, 4326) "
      "ENCODING COMPRESSED(32));");
  std::vector<std::string> t1_rows{
      "INSERT INTO T1 VALUES(-87.689092213,41.93114581,'2009-05-21 09:15:00');",
      "INSERT INTO T1 VALUES(-87.570153464,41.765684768,'2010-12-04 13:55:00');",
      "INSERT INTO T1 VALUES(-87.65108322,41.788356771,'2019-09-14 21:00:00');",
      "INSERT INTO T1 VALUES(-87.68855137600001,41.780277183,'2007-04-24 05:00:00');",
      "INSERT INTO T1 VALUES(-87.76157492500001,41.881299089,'2006-12-14 07:00:00');",
      "INSERT INTO T1 VALUES(-87.62264123,41.737711213,'2022-12-11 10:30:00');",
      "INSERT INTO T1 VALUES(-87.722426654,41.895875266,'2018-07-06 18:30:00');",
      "INSERT INTO T1 VALUES(-87.668235516,41.748017376,'2015-05-14 19:00:00');",
      "INSERT INTO T1 VALUES(-87.716847981,41.788761443,'2020-01-02 22:30:00');",
      "INSERT INTO T1 VALUES(-87.65228958500001,41.941948705,'2017-07-24 14:20:00');"};
  std::vector<std::string> t2_rows{
      "INSERT INTO T2 VALUES(170318309003,'MULTIPOLYGON (((-87.6877727581597 "
      "41.9286348307173,-87.6877837384528 41.9287648340355,-87.6878067048675 "
      "41.9294178262024,-87.6878467703647 41.9303598263908,-87.6879097184576 "
      "41.93217781928,-87.6887227630656 41.9321658331585,-87.6900447568344 "
      "41.9321618517545,-87.6927787660122 41.9321378376019,-87.6927837113351 "
      "41.9318208340238,-87.6927697135568 41.931591840429,-87.6927437296569 "
      "41.9314008587652,-87.6927617507487 41.9311238368652,-87.6927427238285 "
      "41.9308088449439,-87.6927397063434 41.9301348561096,-87.6926877385437 "
      "41.9299538489105,-87.6927077712923 41.9297358356089,-87.6926637663006 "
      "41.9285158496017,-87.6904667018403 41.9285348346124,-87.6902237104672 "
      "41.9285208368341,-87.6898977382527 41.9284758260141,-87.6894377394064 "
      "41.9283788473943,-87.6891257649703 41.9283818229699,-87.6883366926053 "
      "41.9279508255087,-87.6877347043193 41.9275968577376,-87.6877727581597 "
      "41.9286348307173)))');",
      "INSERT INTO T2 VALUES(170314306001,'MULTIPOLYGON (((-87.5664896366962 "
      "41.7663258136093,-87.5674916932208 41.7663098041743,-87.5677426474019 "
      "41.7663068285986,-87.5681567134187 41.7663038111135,-87.5695676391803 "
      "41.7662738039001,-87.569788669967 41.7662808027893,-87.5707716995714 "
      "41.7662588002934,-87.5714026892425 41.7662698224961,-87.5733016932259 "
      "41.766237803626,-87.573861688177 41.7662358338787,-87.5744697114334 "
      "41.7662428327679,-87.5763076951617 41.7662218361004,-87.5763066893333 "
      "41.7662007975235,-87.5763056835049 41.766146818067,-87.5763036718482 "
      "41.7660787989227,-87.5762957090402 41.7656918064531,-87.5762906798982 "
      "41.7654728292327,-87.5762876624131 41.7653008325795,-87.5762827170902 "
      "41.7651077973494,-87.5762667076552 41.7643387996426,-87.5755526533237 "
      "41.7643488160168,-87.572784697438 41.7643747999167,-87.5719517039005 "
      "41.7643858221194,-87.5698906777286 41.7644058129584,-87.5689206400741 "
      "41.7644188049084,-87.5664926541813 41.764442819061,-87.5665017066367 "
      "41.7653008325795,-87.5665106752731 41.765544829781,-87.5665146985867 "
      "41.765952818918,-87.5664896366962 41.7663258136093)))');",
      "INSERT INTO T2 VALUES(170316805001,'MULTIPOLYGON (((-87.6500216720859 "
      "41.7942478190149,-87.6501546928893 41.7942508365001,-87.6524546871206 "
      "41.7942178118016,-87.6536657044914 41.7941988267909,-87.6546367479743 "
      "41.7941758184667,-87.6548797393473 41.7941797998707,-87.6547426952304 "
      "41.7887138350814,-87.654712688017 41.7878528040777,-87.6546897216023 "
      "41.7868938305354,-87.6538506930945 41.7869027991718,-87.6534787042315 "
      "41.786909798061,-87.6498336659976 41.7869638194269,-87.6498687023529 "
      "41.7882728212458,-87.649884711788 41.7885958178847,-87.6500216720859 "
      "41.7942478190149)))');",
      "INSERT INTO T2 VALUES(170318350004,'MULTIPOLYGON (((-87.6873107476567 "
      "41.7792128221035,-87.6873257512633 41.7796897943037,-87.6873517351632 "
      "41.7806718180797,-87.6873627154563 41.7810378138819,-87.6873716840927 "
      "41.7814017980273,-87.6874117495899 41.7828617998319,-87.6875997556781 "
      "41.7828607940035,-87.6880147437044 41.7828518253671,-87.6910647506318 "
      "41.7828058087187,-87.6910536865196 41.7824408187449,-87.6910236793063 "
      "41.7813478185708,-87.6910147106699 41.7809837925159,-87.6910037303767 "
      "41.7806188025422,-87.6909747289917 41.7795247965397,-87.690972717335 "
      "41.7794248004348,-87.690964754527 41.7791608123943,-87.6887707075518 "
      "41.7791918254361,-87.6878137456662 41.7792108104467,-87.6874566765909 "
      "41.77920879879,-87.6873107476567 41.7792128221035)))');",
      "INSERT INTO T2 VALUES(170312519004,'MULTIPOLYGON (((-87.7629207110791 "
      "41.8802788350174,-87.7618297225618 41.8802948444524,-87.7612637764594 "
      "41.8803008375132,-87.7601247596369 41.8803158411199,-87.7601797449217 "
      "41.8819148148791,-87.7602667490767 41.8840908407625,-87.7602627257631 "
      "41.8842088160497,-87.7602507396416 41.8843068424074,-87.7605377360063 "
      "41.8843018132655,-87.7620157169933 41.8842818224264,-87.7620897291983 "
      "41.8842818224264,-87.7636667842808 41.8842588141022,-87.7641657589768 "
      "41.8842538268698,-87.7646717744715 41.8842458221522,-87.7650077211508 "
      "41.8842428465766,-87.7648897877731 41.8810658119065,-87.7648717666813 "
      "41.8805018355513,-87.7648697550245 41.8802538150364,-87.7629207110791 "
      "41.8802788350174)))');",
      "INSERT INTO T2 VALUES(170314403001,'MULTIPOLYGON (((-87.6239186653979 "
      "41.7363128167281,-87.6233856601749 41.7363408122847,-87.6228777168425 "
      "41.7363758067304,-87.6217946911332 41.736403802287,-87.6209986617886 "
      "41.7364138186613,-87.6210537308925 41.7386038004135,-87.6211436687136 "
      "41.7418897998249,-87.6211807167256 41.7433487958011,-87.6211916970188 "
      "41.7437138276844,-87.6219956891714 41.7437017996533,-87.6231126615885 "
      "41.7436818088143,-87.6243376767376 41.7436628238036,-87.6243266964445 "
      "41.7432977919203,-87.6243246847877 41.7432058005329,-87.6242987008878 "
      "41.742202821999,-87.6242897322515 41.7418377901157,-87.6241997106114 "
      "41.7385068217937,-87.6241896523275 41.7374498218938,-87.6241597289332 "
      "41.7363398064563,-87.6241707092264 41.7363068236673,-87.6239186653979 "
      "41.7363128167281)))');",
      "INSERT INTO T2 VALUES(170312312003,'MULTIPOLYGON (((-87.7226627654036 "
      "41.8954058233161,-87.721441773568 41.8954178513472,-87.7199787123687 "
      "41.8954348247011,-87.7199897764809 41.895798850756,-87.7200397326239 "
      "41.8972558350755,-87.720050712917 41.8976208250493,-87.7200987412222 "
      "41.8990818326823,-87.7203417325953 41.8990788151971,-87.7204037586788 "
      "41.8990788151971,-87.7207077703069 41.8990758396215,-87.7210127039445 "
      "41.8990738279648,-87.7215607127741 41.899067834904,-87.7216217330292 "
      "41.899067834904,-87.7219257446574 41.8990638115905,-87.7222307621139 "
      "41.8990618418432,-87.72229169855 41.8990608360148,-87.7225356957514 "
      "41.8990598301865,-87.7234547714346 41.8990538371257,-87.7235157078707 "
      "41.8990528312973,-87.7237617167289 41.8990518254689,-87.7237097489292 "
      "41.8975968108967,-87.7237087431008 41.8973758220195,-87.7236967569793 "
      "41.8972248220338,-87.7236847708578 41.8968588262316,-87.7236427775229 "
      "41.8953978185986,-87.7226627654036 41.8954058233161)))');",
      "INSERT INTO T2 VALUES(170317105002,'MULTIPOLYGON (((-87.6679197175744 "
      "41.7448398106475,-87.6671907434553 41.7448498270218,-87.6657357288831 "
      "41.7448717876081,-87.6657686697625 41.7463257963519,-87.6658136805826 "
      "41.7481458008979,-87.6658586914026 41.7498718023998,-87.6658696716958 "
      "41.7503328070745,-87.6660896966542 41.7503328070745,-87.6661127468879 "
      "41.7503318012461,-87.6668417210071 41.7503208209529,-87.6670847123801 "
      "41.7503178034678,-87.6673266979248 41.7503138220638,-87.6680537442062 "
      "41.7503038056895,-87.6682967355793 41.7503007882043,-87.6682606933956 "
      "41.7488448097132,-87.6682527305876 41.7484808255678,-87.6681627089475 "
      "41.7448377989907,-87.6679197175744 41.7448398106475)))');",
      "INSERT INTO T2 VALUES(170316204002,'MULTIPOLYGON (((-87.7160987293888 "
      "41.7860518264519,-87.7136217093624 41.7860918081301,-87.7133807296461 "
      "41.7860967953625,-87.7131257521515 41.7860998128476,-87.7131397499298 "
      "41.7870038011051,-87.7132047096794 41.7879198173936,-87.7132417576915 "
      "41.7888297987119,-87.7133207152194 41.7897538197179,-87.7134787140943 "
      "41.7897298055653,-87.7152697591648 41.7897028158371,-87.7157186938989 "
      "41.7896968227763,-87.7162076941301 41.7896888180588,-87.7181647008835 "
      "41.7896598166738,-87.718152714762 41.7892027934032,-87.7181437461256 "
      "41.7889318064735,-87.7181387169837 41.7887507992744,-87.7181267308621 "
      "41.7882928120849,-87.7181186842351 41.7880218251553,-87.7181147447406 "
      "41.7878408179562,-87.7181087097703 41.7876577991003,-87.7180766909002 "
      "41.7864707958822,-87.7180677222638 41.7862028264376,-87.7180626931219 "
      "41.7860218192386,-87.7160987293888 41.7860518264519)))');",
      "INSERT INTO T2 VALUES(170310621003,'MULTIPOLYGON (((-87.6531026920551 "
      "41.9429538454595,-87.6534937078382 41.9434158559625,-87.6536077017214 "
      "41.9435738548374,-87.6538477594284 41.9435818595549,-87.6542256994425 "
      "41.9435788420698,-87.654213713321 41.9432128462676,-87.654168702501 "
      "41.9417498269778,-87.6541567163794 41.9413838311757,-87.6541117055594 "
      "41.9399198479671,-87.6539627591399 41.9399238293711,-87.6532736828799 "
      "41.9399278526846,-87.6518366893995 41.9399528307561,-87.6492727490371 "
      "41.9399888310302,-87.6492896804816 41.9405578365273,-87.6493326796448 "
      "41.9418038483438,-87.649356735707 41.9425338282914,-87.6493636926866 "
      "41.9427168471472,-87.6522487437596 41.9426768235595,-87.6523957623413 "
      "41.9426488280029,-87.6527327148489 41.9424968221888,-87.6531026920551 "
      "41.9429538454595)))');"};
  for (std::string row : t1_rows) {
    sql(row);
  }

  for (std::string row : t2_rows) {
    sql(row);
  }
  setExecuteMode(TExecuteMode::GPU);
  TRowDescriptor validation_result;
  std::string q{
      "WITH T3 AS (SELECT /*+ keep_result */ T2.FIPS, CAST(SUM(CASE WHEN "
      "PG_DATE_TRUNC('YEAR', T1.D) = '2021-01-01 00:00:00' THEN 1 ELSE 0 END) AS DOUBLE) "
      "/ NULLIF(SUM(CASE WHEN PG_DATE_TRUNC('YEAR', T1.D) = '2019-01-01 00:00:00' THEN 1 "
      "ELSE 0 END), 0) * 100 - 100 AS percentage_change FROM T1 INNER JOIN T2 ON "
      "ST_CONTAINS(T2.geom, ST_SETSRID(ST_POINT(T1.Longitude, T1.Latitude), 4326)) GROUP "
      "BY T2.FIPS) SELECT T2.geom, T1.percentage_change FROM T3 AS T1 INNER JOIN T2 ON "
      "T1.FIPS = T2.FIPS;"};
  db_handler->sql_validate(validation_result, session_id, q);
  sql(q);
  db_handler->sql_validate(validation_result, session_id, q);
}

int main(int argc, char* argv[]) {
  g_is_test_env = true;
  ScopeGuard reset = [] { g_is_test_env = false; };
  TestHelpers::init_logger_stderr_only(argc, argv);
  namespace po = boost::program_options;
  po::options_description desc("Options");
  logger::LogOptions log_options(argv[0]);
  log_options.max_files_ = 0;  // stderr only by default
  desc.add(log_options.get_options());

  po::variables_map vm;
  po::store(po::command_line_parser(argc, argv).options(desc).allow_unregistered().run(),
            vm);
  po::notify(vm);

  int err{0};
  try {
    testing::InitGoogleTest(&argc, argv);
    testing::AddGlobalTestEnvironment(new DBHandlerTestEnvironment);
    err = RUN_ALL_TESTS();
  } catch (const std::exception& e) {
    LOG(ERROR) << e.what();
  }
  return err;
}
